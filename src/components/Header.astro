---
import Hr from "./Hr.astro";
import IconX from "@/assets/icons/IconX.svg";
import IconMoon from "@/assets/icons/IconMoon.svg";
import IconSearch from "@/assets/icons/IconSearch.svg";
import IconArchive from "@/assets/icons/IconArchive.svg";
import IconSunHigh from "@/assets/icons/IconSunHigh.svg";
import IconMenuDeep from "@/assets/icons/IconMenuDeep.svg";
import LinkButton from "./LinkButton.astro";
import { SITE } from "@/config";

const { pathname } = Astro.url;

// Remove trailing slash from current pathname if exists
const currentPath =
  pathname.endsWith("/") && pathname !== "/" ? pathname.slice(0, -1) : pathname;

const isActive = (path: string) => {
  const currentPathArray = currentPath.split("/").filter(p => p.trim());
  const pathArray = path.split("/").filter(p => p.trim());

  return currentPath === path || currentPathArray[0] === pathArray[0];
};
---

<header
  class="sticky top-0 z-40 w-full border-b border-border/50 bg-background/80 backdrop-blur-xl transition-all duration-300"
>
  <a
    id="skip-to-content"
    href="#main-content"
    class="absolute -top-full left-16 z-50 rounded-lg bg-background px-4 py-2 text-accent shadow-lg ring-2 ring-accent/20 backdrop-blur-lg transition-all duration-300 focus:top-4"
  >
    Skip to content
  </a>
  <div
    id="nav-container"
    class="mx-auto flex max-w-6xl flex-col items-center justify-between sm:flex-row"
  >
    <div
      id="top-nav-wrap"
      class="relative flex w-full items-center justify-between p-4 sm:py-6"
    >
      <a
        href="/"
        class="group relative flex-shrink-0 py-1 text-xl leading-7 font-bold text-foreground transition-all duration-300 hover:text-accent sm:text-2xl"
      >
        <span
          class="bg-gradient-to-r from-accent to-accent/80 bg-clip-text text-transparent"
        >
          {SITE.title}
        </span>
        <div
          class="absolute -inset-1 rounded-lg bg-gradient-to-r from-accent/20 to-transparent opacity-0 blur transition-opacity duration-300 group-hover:opacity-100"
        >
        </div>
      </a>
      <nav
        id="nav-menu"
        class="flex w-auto flex-shrink-0 items-center sm:ml-4 sm:space-x-4"
      >
        <button
          id="menu-btn"
          class="focus-outline group relative self-end overflow-hidden rounded-lg bg-muted/50 p-2 backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:bg-accent/10 active:scale-95 sm:hidden"
          aria-label="Open Menu"
          aria-expanded="false"
          aria-controls="menu-items"
        >
          <IconX
            id="close-icon"
            class="hidden h-6 w-6 transition-transform duration-300"
          />
          <IconMenuDeep
            id="menu-icon"
            class="h-6 w-6 transition-transform duration-300"
          />
        </button>
        <ul
          id="menu-items"
          class:list={[
            "mt-6 grid w-44 grid-cols-1 place-content-center gap-2 rounded-xl border border-border/50 bg-background/90 p-3 shadow-xl backdrop-blur-xl",
            "[&>li>a]:block [&>li>a]:rounded-lg [&>li>a]:px-3 [&>li>a]:py-2 [&>li>a]:text-center [&>li>a]:text-sm [&>li>a]:font-medium [&>li>a]:transition-all [&>li>a]:duration-300 [&>li>a]:hover:scale-105 [&>li>a]:hover:bg-accent/10 [&>li>a]:hover:text-accent [&>li>a]:active:scale-95",
            "hidden scale-95 transform opacity-0 transition-all duration-300",
            "sm:mt-0 sm:ml-0 sm:flex sm:w-auto sm:scale-100 sm:flex-row sm:gap-x-3 sm:gap-y-0 sm:border-none sm:bg-transparent sm:p-0 sm:opacity-100 sm:shadow-none sm:backdrop-blur-none",
          ]}
        >
          <li class="col-span-1">
            <a href="/posts" class:list={{ "active-nav": isActive("/posts") }}>
              Stories & Insights
            </a>
          </li>
          <li class="col-span-1">
            <a href="/tags" class:list={{ "active-nav": isActive("/tags") }}>
              Category
            </a>
          </li>
          <li class="col-span-1">
            <a href="/about" class:list={{ "active-nav": isActive("/about") }}>
              About
            </a>
          </li>
          {
            SITE.showArchives && (
              <li class="col-span-1">
                <LinkButton
                  href="/archives"
                  class:list={[
                    "focus-outline flex justify-center rounded-lg p-2 text-sm transition-all duration-300 hover:scale-105 hover:bg-accent/10 active:scale-95",
                    {
                      "active-nav bg-accent/20 [&>svg]:stroke-accent":
                        isActive("/archives"),
                    },
                  ]}
                  ariaLabel="archives"
                  title="Archives"
                >
                  <IconArchive class="hidden h-4 w-4 sm:inline-block" />
                  <span class="sm:sr-only">Archives</span>
                </LinkButton>
              </li>
            )
          }
          <li
            class="sm:col-span-auto col-span-1 flex items-center justify-center"
          >
            <LinkButton
              href="/search"
              class:list={[
                "focus-outline group relative flex overflow-hidden rounded-lg p-2 transition-all duration-300 hover:scale-105 hover:bg-accent/10 active:scale-95",
                { "bg-accent/20 [&>svg]:stroke-accent": isActive("/search") },
              ]}
              ariaLabel="search"
              title="Search"
            >
              <IconSearch
                class="h-4 w-4 transition-transform duration-300 group-hover:scale-110"
              />
              <span class="sr-only">Search</span>
            </LinkButton>
          </li>
          {
            SITE.lightAndDarkMode && (
              <li class="sm:col-span-auto col-span-1 flex items-center justify-center">
                <button
                  id="theme-btn"
                  class="focus-outline group relative size-10 overflow-hidden rounded-lg bg-muted/50 p-2 backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:bg-accent/10 active:scale-95 hover:[&>svg]:stroke-accent"
                  title="Toggles light & dark"
                  aria-label="auto"
                  aria-live="polite"
                >
                  <IconMoon class="absolute top-1/2 left-1/2 h-4 w-4 -translate-x-1/2 -translate-y-1/2 scale-100 rotate-0 transition-all duration-500 dark:scale-0 dark:-rotate-90" />
                  <IconSunHigh class="absolute top-1/2 left-1/2 h-4 w-4 -translate-x-1/2 -translate-y-1/2 scale-0 rotate-90 transition-all duration-500 dark:scale-100 dark:rotate-0" />
                </button>
              </li>
            )
          }
        </ul>
      </nav>
    </div>
  </div>
  <Hr />
</header>

<style>
  /* Enhanced mobile menu animations */
  #menu-items {
    transform-origin: top center;
  }

  /* Smooth gradient animation for site title */
  @keyframes gradientShift {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* Enhanced active navigation styles */
  .active-nav {
    position: relative;
    background: linear-gradient(
      135deg,
      var(--color-accent) / 0.15,
      var(--color-accent) / 0.05
    );
    border-radius: 0.5rem;
  }

  .active-nav::before {
    content: "";
    position: absolute;
    inset: -2px;
    border-radius: 0.5rem;
    background: linear-gradient(135deg, var(--color-accent) / 0.3, transparent);
    opacity: 0.5;
    z-index: -1;
  }

  /* Enhanced hover effects for navigation */
  nav a:hover {
    transform: translateY(-1px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Improved focus styles */
  .focus-outline:focus-visible {
    outline: 2px dashed var(--color-accent);
    outline-offset: 4px;
    box-shadow: 0 0 0 4px var(--color-accent) / 0.2;
  }
</style>

<script>
  function toggleNav() {
    const menuBtn = document.querySelector("#menu-btn") as HTMLButtonElement;
    const menuItems = document.querySelector("#menu-items") as HTMLElement;
    const menuIcon = document.querySelector("#menu-icon") as HTMLElement;
    const closeIcon = document.querySelector("#close-icon") as HTMLElement;

    if (!menuBtn || !menuItems || !menuIcon || !closeIcon) return;

    menuBtn.addEventListener("click", () => {
      const openMenu = menuBtn.getAttribute("aria-expanded") === "true";

      menuBtn.setAttribute("aria-expanded", openMenu ? "false" : "true");
      menuBtn.setAttribute("aria-label", openMenu ? "Open Menu" : "Close Menu");

      if (openMenu) {
        // Closing menu
        menuItems.classList.add("opacity-0", "scale-95");
        menuItems.classList.remove("opacity-100", "scale-100");
        setTimeout(() => {
          menuItems.classList.add("hidden");
        }, 150);
      } else {
        // Opening menu
        menuItems.classList.remove("hidden");
        setTimeout(() => {
          menuItems.classList.remove("opacity-0", "scale-95");
          menuItems.classList.add("opacity-100", "scale-100");
        }, 10);
      }

      // Toggle icons with rotation
      menuIcon.classList.toggle("hidden");
      closeIcon.classList.toggle("hidden");

      if (!openMenu) {
        (menuIcon as HTMLElement).style.transform = "rotate(180deg)";
        setTimeout(() => {
          (menuIcon as HTMLElement).style.transform = "rotate(0deg)";
        }, 150);
      }
    });

    // Close menu when clicking outside
    document.addEventListener("click", e => {
      const target = e.target as HTMLElement;
      if (!menuBtn.contains(target) && !menuItems.contains(target)) {
        const isOpen = menuBtn.getAttribute("aria-expanded") === "true";
        if (isOpen) {
          menuBtn.click();
        }
      }
    });

    // Close menu on escape key
    document.addEventListener("keydown", e => {
      if (e.key === "Escape") {
        const isOpen = menuBtn.getAttribute("aria-expanded") === "true";
        if (isOpen) {
          menuBtn.click();
        }
      }
    });
  }

  toggleNav();

  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", toggleNav);

  // Add scroll effect to header
  function addScrollEffect() {
    const header = document.querySelector("header") as HTMLElement;
    if (!header) return;

    window.addEventListener("scroll", () => {
      const currentScrollY = window.scrollY;

      if (currentScrollY > 100) {
        header.classList.add("shadow-lg");
        header.style.backgroundColor = "var(--color-background)";
      } else {
        header.classList.remove("shadow-lg");
        header.style.backgroundColor = "var(--color-background)/0.8";
      }
    });
  }

  addScrollEffect();
  document.addEventListener("astro:after-swap", addScrollEffect);
</script>
